{"componentChunkName":"component---src-templates-post-js","path":"/notes/static-files/","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Accessing static files in Jekyll","date":"2017-01-30T00:00:00.000Z","date_pretty":"January 30th, 2017","date_from_now":"3 years ago","last_modified_at":"2018-11-07T15:40:54.000Z","last_modified_at_from_now":"2 years ago","path":"/notes/static-files/","author":null,"excerpt":null,"tags":["TIL","web development","Jekyll"],"image":null,"toc":true,"comments":true,"comments_locked":null,"hide_meta":null},"id":"4e16e1b5-ca34-5ec1-b280-af39884ef7b7","html":"<p>While investigating ways of using static files with Jekyll for a site prototype I was building, I learned that <code class=\"language-text\">site.static_files</code> was a thing. What is it and why you should care? Let me take a minute to share…</p>\n<p>According to the official <a href=\"https://jekyllrb.com/docs/static-files/\">Jekyll documentation</a>, “a static file is a file that does not contain any YAML front matter. These include images, PDFs, and other un-rendered content.”</p>\n<p><strong>The useful bit</strong> — every one of these static files becomes accessible to Jekyll when looping through <code class=\"language-text\">site.static_files</code>. There aren’t many reasons why you’d want to do this, but if building “plugin-free” image galleries is one of them — here’s how.</p>\n<h2 id=\"organize-static-files\" style=\"position:relative;\"><a href=\"#organize-static-files\" aria-label=\"organize static files permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Organize static files</h2>\n<p>Let’s say you have a folder (named <code class=\"language-text\">gallery-1</code>) of images you want to display together on a post or page.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">├── assets/\n│   └── images/\n│       └── gallery-1/\n│           ├── foo.jpg\n│           ├── bar.gif\n│           └── yaz.png</code></pre></div>\n<h2 id=\"start-a-loop\" style=\"position:relative;\"><a href=\"#start-a-loop\" aria-label=\"start a loop permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Start a loop</h2>\n<p>Using <a href=\"https://shopify.github.io/liquid/\">Liquid</a><sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup> you’d start by looping through <code class=\"language-text\">site.static_files</code> and then narrow down the files based on their paths. In this case we only want to show those images that live together in <code class=\"language-text\">assets/images/gallery-1</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"liquid\"><pre class=\"language-liquid\"><code class=\"language-liquid\">{<span class=\"token operator\">%</span> <span class=\"token keyword\">raw</span><span class=\"token operator\">%</span>}{<span class=\"token operator\">%</span> <span class=\"token keyword\">for</span> image <span class=\"token keyword\">in</span> site.static_files <span class=\"token operator\">%</span>}\n  {<span class=\"token operator\">%</span> <span class=\"token keyword\">if</span> image.path contains 'assets<span class=\"token operator\">/</span>images<span class=\"token operator\">/</span>gallery<span class=\"token operator\">-</span><span class=\"token number\">1</span>' <span class=\"token operator\">%</span>}\n    <span class=\"token operator\">&lt;</span>img src<span class=\"token operator\">=</span>\"{{ image.path }}\" alt<span class=\"token operator\">=</span>\"\"<span class=\"token operator\">></span>\n  {<span class=\"token operator\">%</span> <span class=\"token keyword\">endif</span> <span class=\"token operator\">%</span>}\n{<span class=\"token operator\">%</span> <span class=\"token keyword\">endfor</span> <span class=\"token operator\">%</span>}</code></pre></div>\n<p>Which will generate into the following HTML:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>assets/images/gallery-1/bar.gif<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>assets/images/gallery-1/foo.jpg<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>assets/images/gallery-1/yaz.png<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h2 id=\"build-an-image-gallery-with-liquid\" style=\"position:relative;\"><a href=\"#build-an-image-gallery-with-liquid\" aria-label=\"build an image gallery with liquid permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Build an image gallery with Liquid</h2>\n<p>What if you’d rather spit out a group of thumbnail<sup id=\"fnref-2\"><a href=\"#fn-2\" class=\"footnote-ref\">2</a></sup> images that link to a full-size version? Completely achievable using the above method — if you are careful to name these files in a predictable way.</p>\n<p>Start by creating thumbnail versions of each image however you’d like. The important part here is to be consistent with the naming of these files. For the sake of this example I’ll be adding the suffix <code class=\"language-text\">-th</code> to each filename and storing them in the same location as the full-size assets.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">├── assets/\n│   └── images/\n│       └── gallery-1/\n│           ├── foo.jpg\n│           ├── foo-th.jpg\n│           ├── bar.gif\n│           ├── bar-th.gif\n│           ├── yaz.png\n│           └── yaz-th.png</code></pre></div>\n<p>Assuming a thumbnail and full-size image share the same base name, we can construct the gallery’s HTML with the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"liquid\"><pre class=\"language-liquid\"><code class=\"language-liquid\">{<span class=\"token operator\">%</span> <span class=\"token keyword\">for</span> image <span class=\"token keyword\">in</span> site.static_files <span class=\"token operator\">%</span>}\n  {<span class=\"token operator\">%</span> <span class=\"token keyword\">if</span> image.path contains 'assets<span class=\"token operator\">/</span>images<span class=\"token operator\">/</span>gallery<span class=\"token operator\">-</span><span class=\"token number\">1</span>' <span class=\"token operator\">%</span>}\n    {<span class=\"token operator\">%</span> <span class=\"token keyword\">unless</span> image.path contains '<span class=\"token operator\">-</span>th.' <span class=\"token operator\">%</span>}\n      <span class=\"token operator\">&lt;</span>a href<span class=\"token operator\">=</span>\"{{ image.path }}\"<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>img src<span class=\"token operator\">=</span>\"{{ image.basename <span class=\"token operator\">|</span> <span class=\"token function\">append</span><span class=\"token operator\">:</span> '<span class=\"token operator\">-</span>th' <span class=\"token operator\">|</span> <span class=\"token function\">append</span><span class=\"token operator\">:</span> image.extname }}\" alt<span class=\"token operator\">=</span>\"\"<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">></span>\n    {<span class=\"token operator\">%</span> <span class=\"token keyword\">endunless</span> <span class=\"token operator\">%</span>}\n  {<span class=\"token operator\">%</span> <span class=\"token keyword\">endif</span> <span class=\"token operator\">%</span>}\n{<span class=\"token operator\">%</span> <span class=\"token keyword\">endfor</span> <span class=\"token operator\">%</span>}</code></pre></div>\n<p>Now you may be wondering where <code class=\"language-text\">basename</code> and <code class=\"language-text\">extname</code> came from… simple. Each static file contains metadata accessible via Liquid with the following variables:</p>\n<table>\n<thead>\n<tr>\n<th>Variable</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">file.path</code></td>\n<td>The relative path to the file, e.g. <code class=\"language-text\">/assets/img/image.jpg</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">file.modified_time</code></td>\n<td>The time the file was last modified, e.g. <code class=\"language-text\">2016-04-01 16:35:26 +0200</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">file.name</code></td>\n<td>The string name of the file e.g. <code class=\"language-text\">image.jpg</code> for <code class=\"language-text\">image.jpg</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">file.basename</code></td>\n<td>The string basename of the file e.g. <code class=\"language-text\">image</code> for <code class=\"language-text\">image.jpg</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">file.extname</code></td>\n<td>The extension name for the file, e.g. <code class=\"language-text\">.jpg</code> for <code class=\"language-text\">image.jpg</code></td>\n</tr>\n</tbody>\n</table>\n<div class=\"custom-block notice\"><div class=\"custom-block-heading\">Note: filename consistency is paramount</div><div class=\"custom-block-body\"><p>Using this method to build a gallery of thumbnail images is fragile. The <code class=\"language-text\">image</code> objects inside of these loops are not validated by Jekyll at all. If you call in paths that don’t exist it will silently fail and leave you with missing images on the page.</p></div></div>\n<h2 id=\"feedback-and-improvements\" style=\"position:relative;\"><a href=\"#feedback-and-improvements\" aria-label=\"feedback and improvements permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Feedback and improvements</h2>\n<p>In the end looping through <code class=\"language-text\">site.static_files</code> became an easy way spitting out a folder of files without having to hard code <code class=\"language-text\">&lt;img&gt;</code> elements.  Sure there are a million different ways to do this with Jekyll, but this served a need and was a quick hack.</p>\n<p>Curious if others are using <strong>static files</strong> in cool and interesting ways. Feel free to let me know in the comment section below if you are.</p>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p>Liquid is an open-source template language created by Shopify and written in Ruby.</p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-2\">\n<p>Thumbnails are reduced-size versions of pictures, used to help in recognizing and organizing them, serving the same role for images as a normal text index does for words. </p>\n<a href=\"#fnref-2\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>","excerpt":"While investigating ways of using static files with Jekyll for a site prototype I was building, I learned that  was a thing. What is it and…","timeToRead":4,"tableOfContents":"<ul>\n<li><a href=\"/notes/static-files/#organize-static-files\">Organize static files</a></li>\n<li><a href=\"/notes/static-files/#start-a-loop\">Start a loop</a></li>\n<li><a href=\"/notes/static-files/#build-an-image-gallery-with-liquid\">Build an image gallery with Liquid</a></li>\n<li><a href=\"/notes/static-files/#feedback-and-improvements\">Feedback and improvements</a></li>\n</ul>"},"comments":{"edges":[{"node":{"id":"66083b04-0aae-5725-b648-9427697fb12e","frontmatter":{"name":"SidV","email":"e1315801f35b6c3a3f24ae690546f64d","friendlyDate":"July 26, 2017","iso8601Date":"2017-07-26T13:42:14.923Z","published":null},"html":"<p>This is great! Thanks for share. I assumed that the “assets” folder is into\njekyll site.</p>\n<p>But, what happens if you have a folder outside? I mean</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">├── folder/\n├── docs/\n├── _config.yml</code></pre></div>\n<p>And you want to retrieve that folder content?</p>"}},{"node":{"id":"f48e27a8-7985-5ad6-a5f4-747aecec882e","frontmatter":{"name":"Michael Rose","email":"1ce71bc10b86565464b612093d89707e","friendlyDate":"July 26, 2017","iso8601Date":"2017-07-26T14:31:38.158Z","published":null},"html":"<p>Don’t think that’s possible. GitHub Pages is treating the <code class=\"language-text\">docs/</code> folder as its\nown contained Jekyll project and therefore can’t look outside of it.</p>\n<p>Only option I can think of is to get crafty with\n<a href=\"https://help.github.com/articles/using-submodules-with-pages/\">Git submodules</a>\nand pull in outside content.</p>"}}]}},"pageContext":{"next":{"frontmatter":{"path":"/work/basically-basic-jekyll-theme/","title":"Basically Basic","categories":["work"],"tags":["Jekyll","web development","design","open source","GitHub"]},"fileAbsolutePath":"/home/28041/opensource/github.com/mmistakes/made-mistakes-gatsby/src/posts/work/basically-basic-jekyll-theme.md"},"previous":{"frontmatter":{"path":"/articles/improving-jekyll-static-comments/","title":"Improving static comments with Jekyll & Staticman","categories":["articles"],"tags":["web development","GitHub","Jekyll","tutorial"]},"fileAbsolutePath":"/home/28041/opensource/github.com/mmistakes/made-mistakes-gatsby/src/posts/articles/improving-jekyll-static-comments.md"}}}}